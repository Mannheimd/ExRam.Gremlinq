<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="..\T4\Constants.tt" #>
//#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
using System;
using System.Linq.Expressions;
using System.Collections.Generic;
using Gremlin.Net.Process.Traversal;

namespace ExRam.Gremlinq.Core
{
    partial interface IGremlinQueryBase
    {
<# for(var i = 2; i <= 16; i++) { #>
        IValueGremlinQuery<(<#= GetArgumentList("T{0}", i) #>)> Select<<#= GetArgumentList("T{0}", i) #>>(<#= GetArgumentList("StepLabel<T{0}> label{0}", i) #>);
<# } #>
    }


<# foreach (var iface in Typed(baseInterfaces)) { #>
    public partial interface <#= iface.Replace("<", "Base<") #>
    {
        new <#= iface #> As(StepLabel<<#= GetElement(iface) #>> stepLabel);
    }
<# } #>


<# foreach (var iface in Untyped(baseInterfaces)) { #>
    public partial interface <#= iface #>
    {
        new <#= ChangeType(iface, "TResult").Replace("Base", "") #> Cast<TResult>();
    }
<# } #>


<# foreach (var iface in Untyped(EdgeOrVertex(baseInterfaces))) { #>
    public partial interface <#= iface #>
    {
        new <#= ChangeType(iface, "TTarget").Replace("Base", "") #> OfType<TTarget>();
    }
<# } #>

}

#pragma warning restore CS0109 // Member does not hide an inherited member; new keyword is not required
<#@ include file="..\T4\HelperMethods.tt" #>