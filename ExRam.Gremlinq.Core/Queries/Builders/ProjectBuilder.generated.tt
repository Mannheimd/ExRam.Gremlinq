<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="..\T4\Constants.tt" #>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
using System;
using System.Linq.Expressions;
using System.Collections.Generic;
using Gremlin.Net.Process.Traversal;
using System.Collections.Immutable;
using System.Linq.Expressions;
using LanguageExt;

namespace ExRam.Gremlinq.Core
{
    public static partial class ProjectBuilder
    {
        private sealed partial class ProjectBuilderImpl<TSourceQuery, TElement, TItem1, TItem2, TItem3, TItem4, TItem5, TItem6, TItem7, TItem8, TItem9, TItem10, TItem11, TItem12, TItem13, TItem14, TItem15, TItem16> :
<# for(var i = 2; i <= 16; i++) { #>
            IProjectTupleBuilder<TSourceQuery, TElement, <#= GetArgumentList("TItem{0}", i) #>>,
<# } #>
            IProjectTupleBuilder<TSourceQuery, TElement>,
            IProjectTupleBuilder<TSourceQuery, TElement, TItem1>
        {
<# for(var i = 1; i < 15; i++) { #>
            IProjectTupleBuilder<TSourceQuery, TElement, <#= GetArgumentList("TItem{0}", i) #>, TNewItem<#= i+1 #>> IProjectTupleBuilder<TSourceQuery, TElement, <#= GetArgumentList("TItem{0}", i) #>>.By<TNewItem<#= i + 1 #>>(Func<TSourceQuery, IGremlinQuery<TNewItem<#= i+1 #>>> projection)
            {
                return By<<#= GetArgumentList("TItem{0}", i) #>, TNewItem<#= i+1 #>, <#= GetArgumentList("Unit", 15 - i) #>>(projection);
            }
<# } #>
        }
    }
}

<#@ include file="..\T4\HelperMethods.tt" #>
